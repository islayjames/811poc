name: Deploy to Railway

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

env:
  PYTHON_VERSION: '3.11'
  UV_VERSION: '0.4.10'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Verify uv installation
      run: uv --version

    - name: Create virtual environment
      run: uv venv .venv

    - name: Install dependencies
      run: |
        uv pip install -e .
        uv pip install -e ".[dev]"

    - name: Run linting
      run: |
        source .venv/bin/activate
        ruff check src/ tests/

    - name: Run type checking
      run: |
        source .venv/bin/activate
        mypy src/texas811_poc/ || true  # Allow type checking to fail for POC deployment

    - name: Run tests
      run: |
        source .venv/bin/activate
        python -m pytest tests/ -v --cov=src/texas811_poc --cov-report=term-missing --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: texas811-poc:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Railway CLI
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH

    - name: Verify Railway CLI
      run: railway --version

    - name: Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        railway login --token $RAILWAY_TOKEN
        railway up --service api

    - name: Wait for deployment
      run: sleep 30

    - name: Health check
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        # Get the deployment URL from Railway
        DEPLOY_URL=$(railway status --json | jq -r '.deployment.url' 2>/dev/null || echo "")

        if [ -z "$DEPLOY_URL" ]; then
          echo "Could not retrieve deployment URL, trying fallback..."
          # Fallback to project domain if available
          DEPLOY_URL=$(railway domain 2>/dev/null || echo "")
        fi

        if [ -n "$DEPLOY_URL" ]; then
          echo "Testing health endpoint at: $DEPLOY_URL"

          # Wait for deployment to be ready
          for i in {1..10}; do
            if curl -f -s "$DEPLOY_URL/health" >/dev/null; then
              echo "‚úÖ Health check passed!"

              # Validate health response
              HEALTH_RESPONSE=$(curl -s "$DEPLOY_URL/health")
              echo "Health response: $HEALTH_RESPONSE"

              # Check if response contains expected fields
              if echo "$HEALTH_RESPONSE" | jq -e '.status' >/dev/null 2>&1; then
                if echo "$HEALTH_RESPONSE" | jq -r '.status' | grep -q "healthy"; then
                  echo "‚úÖ Health check validation passed!"
                  exit 0
                else
                  echo "‚ùå Health check returned unhealthy status"
                  exit 1
                fi
              else
                echo "‚ùå Health check response missing status field"
                exit 1
              fi
            else
              echo "Health check attempt $i failed, waiting 10 seconds..."
              sleep 10
            fi
          done

          echo "‚ùå Health check failed after 10 attempts"
          exit 1
        else
          echo "‚ùå Could not determine deployment URL"
          exit 1
        fi

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.ref == 'refs/heads/main'

    steps:
    - name: Deployment Success
      if: needs.deploy.result == 'success'
      run: |
        echo "üöÄ Deployment to Railway completed successfully!"
        echo "Application is healthy and ready to serve traffic."

    - name: Deployment Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment to Railway failed!"
        echo "Please check the logs and Railway dashboard for more details."
        exit 1
